############################
DISTINCT

-- remove duplicates
SELECT DISTINCT Country
FROM Customers

--removes duplicates for the combination
--of two or more columns
SELECT DISTINCT SupplierID, CategoryID
FROM Products
ORDER BY SupplierID


#################################
TOP or LIMIT

--this returns the 3 most expensive products
--TOP only works in some DB products eg MS SQL Server
SELECT TOP 3 *
FROM Products
ORDER BY UnitPrice DESC

Must use the 'ORDER BY' for the query to make sense.
If 'ORDER BY' is omitted then we don't know which
3 items will be return.


-- LIMIT only works in some DB products eg SQLite, MySQL

--this returns the 3 most expensive products
SELECT *
FROM Products
ORDER BY UnitPrice DESC
LIMIT 3

--this returns the LAST order placed
SELECT * FROM Orders
ORDER BY OrderDate DESC
LIMIT 1

--returns the oldest employee in the company
SELECT * FROM Employees
ORDER BY BirthDate ASC
LIMIT 1

--returns the youngest employee in the company
SELECT * FROM Employees
ORDER BY BirthDate DESC
LIMIT 1


-- Paging with LIMIT

--we have a website that lists the orders
--the orders are arranged in
--pages of 10
--we want page 3

--LIMIT OFFSET, COUNT

--OFFSET, start record offset
-- the first record AFTER this
-- offset is returned
-- if omitted starts from 0

--page 1
SELECT * FROM Orders
ORDER BY OrderDate DESC
LIMIT 10

equivalent to
SELECT * FROM Orders
ORDER BY OrderDate DESC
LIMIT 0, 10  -- LIMIT 1, 10 is WRONG!


--page 2
SELECT * FROM Orders
ORDER BY OrderDate DESC
LIMIT 10 , 10 -- returns from record 11

-- PHP code
-- $offset = ($page - 1) * $pageSize;

--page 3
SELECT * FROM Orders
ORDER BY OrderDate DESC
LIMIT 20, 10 -- returns from record 21


--page 4
SELECT * FROM Orders
ORDER BY OrderDate DESC
LIMIT 30, 10 -- returns from record 31


-- to get the total number for records
SELECT count(*) FROM Orders

############################################
SELECT * FROM Customers
WHERE Country = 'Germany' OR
      Country = 'Mexico'  OR
      Country = 'UK'

is equivalent to:
SELECT * FROM Customers
  WHERE Country IN ('Germany', 'Mexico', 'UK')

All customers not in Germany, Mexico or UK

SELECT * FROM Customers
  WHERE Country NOT IN ('Germany', 'Mexico', 'UK')


################################################
INNER JOIN

Syntax

-- SELECT * FROM first_table_name
-- JOIN second_table_name
-- ON first_table.colunm = second_table.column



//--we want to get customer info for each customerid
SELECT * FROM Orders
JOIN Customers
ON Orders.CustomerID = Customers.Id

-- just return a specific record.
SELECT *
 FROM Orders
 JOIN Customers
 ON Orders.CustomerID = Customers.Id
 WHERE Orders.Id = 27064

--we want to get employee info for each employeeid
SELECT * FROM Orders
JOIN Employees
ON Orders.EmployeeID = Employees.Id


--The above 2 queries combined
SELECT * FROM Orders
JOIN Employees
ON Orders.EmployeeID = Employees.Id
JOIN Customers
ON Orders.CustomerID = Customers.Id


-- joins to determine the meaning of the
-- CustomerID, EmployeeID and ShipperID columns
SELECT * FROM Orders
JOIN Employees
ON Orders.EmployeeID = Employees.Id
JOIN Customers
ON Orders.CustomerID = Customers.Id
JOIN Shippers
ON Orders.ShipVia = Shippers.Id

-- Same query as above with a filtered list of columns
-- Throws ambiguous column name error

SELECT
 Id,
 OrderDate,
 FirstName AS Employee,
 CompanyName AS Customer,
 CompanyName AS Shipper
FROM Orders
JOIN Employees
ON Orders.EmployeeID = Employees.Id
JOIN Customers
ON Orders.CustomerID = Customers.Id
JOIN Shippers
ON Orders.ShipVia = Shippers.Id


-- Corrected query
SELECT
 Orders.Id,
 OrderDate,
 FirstName AS Employee,
 Customers.CompanyName AS Customer,
 Shippers.CompanyName AS Shipper
FROM Orders
JOIN Employees
ON Orders.EmployeeID = Employees.Id
JOIN Customers
ON Orders.CustomerID = Customers.Id
JOIN Shippers
ON Orders.ShipVia = Shippers.Id

#######################################################
--Alias Table names

SELECT *
FROM Orders AS o
JOIN Customers AS c
ON o.CustomerID = c.Id

-- throws errors
SELECT *
FROM Orders AS o
JOIN Customers AS c
ON Orders.CustomerID = Customers.Id


#####################################################
--LEFT OUTER JOIN

SELECT *
FROM Employees as e
LEFT JOIN Orders as o
ON e.Id = o.EmployeeID
WHERE o.Id IS NULL

Returns all records from the Left side table (Employees)
that did not join a row from the right side table (Orders).

The WHERE clause should search for a column from the right
side table (Orders) being NULL. Usually I use the primary
key column but any column that does not accept NULL should work.


---------------------------
Customers that haven't placed an order

Search for:
	Rows from Customers that don't intersect with Orders.

SELECT *
FROM Customers LEFT JOIN Orders
ON Customers.Id = Orders.CustomerID
WHERE Orders.Id IS NULL


######################
Data integrity checking

Rows from Orders that don't intersect with Customers

--run first to delete a customer
DELETE FROM Customers WHERE CustomerID = 2

SELECT *
FROM Orders LEFT JOIN Customers
ON Orders.CustomerID = Customers.Id
WHERE Customers.Id IS NULL

######################################
Rows from Table1 that don't intersect with Table2

SELECT *
FROM Table1 LEFT JOIN Table2
ON Table1.ColA = Table2.ColA
WHERE Table2.ColA IS NULL 

#################################
RIGHT JOIN is a LEFT JOIN reversed.

SELECT *
FROM Customers LEFT JOIN Orders
ON Customers.Id = Orders.CustomerID
WHERE Orders.Id IS NULL

IS THE SAME AS:

SELECT *
FROM Orders RIGHT JOIN Customers
ON Orders.CustomerID = Customers.Id
WHERE Orders.Id IS NULL
